name: Deploy Lambda

on:
  # Trigger the workflow every time you push to the `main` branch
  # Using a different branch name? Replace `main` with your branchâ€™s name
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

env:
  # Setting an environment variable with the value of a configuration variable
  S3_BUCKET: ${{ vars.S3_BUCKET }}
  S3_KEY: ${{ vars.S3_KEY }}
  S3_LAYER_BUCKET: ${{ vars.S3_LAYER_BUCKET }}
  S3_LAYER_KEY: ${{ vars.S3_LAYER_KEY }}
  LAYER_NAME: ${{ vars.LAYER_NAME }}
  LAMBDA_FUNCTION_NAME: ${{ vars.LAMBDA_FUNCTION_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: v22.17.0 # Modify this to your desired Node.js version

    - name: Print changed files # To properly debug what is being deployed (It can be removed).
      run: |
        echo "List of changed files:" 
        echo $(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})

    - name: Deploy Lambda Function
      # This step will zip the repository and upload it to S3, 
      # then update the Lambda function code
      run: |
        # Constants optionally you can define these here
        # S3_BUCKET=
        # S3_KEY=
        # LAMBDA_FUNCTION_NAME=

        # Zip the repo
        zip -r updated_lambda.zip .
        
        # Upload the updated zip to S3
        aws s3 cp updated_lambda.zip s3://$S3_BUCKET/$S3_KEY

        # Update Lambda function code
        aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --s3-bucket $S3_BUCKET --s3-key $S3_KEY

        # Cleanup
        rm updated_lambda.zip


    - name: Deploying Layer (if required)
      # This step will check if package.json has changed,
      # and if so, it will update the Lambda layer with the new dependencies
      run: |
        # Constants optionally you can define these here
        # S3_LAYER_BUCKET=
        # S3_LAYER_KEY=
        # LAYER_NAME=
        # LAMBDA_FUNCTION_NAME=

        echo "Before commit: ${{ github.event.before }}"

        if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ] && [[ -z $(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} package.json) ]]; then
          echo "No updates to package.json, layer update not required."
        else
          # Create a temporary directory for the layer
          echo "Creating temporary layer directory for Node.js dependencies..."
          mkdir nodejs
          cp package.json nodejs/package.json
          cd nodejs

          # Install dependencies
          echo "Installing Node.js dependencies..."
          npm i --omit=dev

          # Zip the repo
          echo "Dependencies installed. Preparing to update Lambda layer..."
          cd ..
          zip -r updated_layer.zip nodejs

          # Upload the updated zip to S3
          echo "Uploading updated layer zip to S3..."
          aws s3 cp updated_layer.zip s3://$S3_LAYER_BUCKET/$S3_LAYER_KEY

          # Update Lambda layer
          echo "Updating Lambda layer..."
          aws lambda publish-layer-version --layer-name $LAYER_NAME  --content S3Bucket=$S3_LAYER_BUCKET,S3Key=$S3_LAYER_KEY

          # Update the Lambda function to use the new layer version
          echo "Updating Lambda function to use the new layer version..."
          aws lambda update-function-configuration --function-name $LAMBDA_FUNCTION_NAME --layers $(aws lambda list-layer-versions --layer-name $LAYER_NAME --query 'LayerVersions[0].LayerVersionArn' --output text)

          # Remove the old layer version
          OLD_LAYER_VERSION=$(aws lambda list-layer-versions --layer-name $LAYER_NAME --query 'LayerVersions[1].Version' --output text)

          if [ "$OLD_LAYER_VERSION" = "None" ]; then
            echo "No old layer version found to remove."
          else
            echo "Old layer version found: $OLD_LAYER_VERSION"
            echo "Removing old layer version..."
            aws lambda delete-layer-version --layer-name $LAYER_NAME --version-number $OLD_LAYER_VERSION
          fi

          # Cleanup
          echo "Cleaning up temporary files..."
          cd ..
          rm -rf nodejs updated_layer.zip
        fi